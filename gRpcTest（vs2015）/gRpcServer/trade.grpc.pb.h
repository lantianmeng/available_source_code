// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trade.proto
#ifndef GRPC_trade_2eproto__INCLUDED
#define GRPC_trade_2eproto__INCLUDED

#include "trade.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mt4api {

// 交易

class Trade final {
 public:
  static constexpr char const* service_full_name() {
    return "mt4api.Trade";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 开仓

    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> Open(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(OpenRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> AsyncOpen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(AsyncOpenRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> PrepareAsyncOpen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(PrepareAsyncOpenRaw(context, cq));
    }
    // 平仓
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::mt4api::TradeCloseResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>> AsyncClose(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>> PrepareAsyncClose(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    // 更新订单
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::mt4api::TradeUpdateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* OpenRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* AsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>* AsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeCloseResp>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mt4api::TradeUpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> Open(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(OpenRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> AsyncOpen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(AsyncOpenRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>> PrepareAsyncOpen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>>(PrepareAsyncOpenRaw(context, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::mt4api::TradeCloseResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>> AsyncClose(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>> PrepareAsyncClose(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::mt4api::TradeUpdateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* OpenRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* AsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>* AsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Open_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 开仓

    virtual ::grpc::Status Open(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mt4api::TradeOpenResp, ::mt4api::TradeOpenReq>* stream);
    // 平仓
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::mt4api::TradeCloseReq* request, ::mt4api::TradeCloseResp* response);
    // 更新订单
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::mt4api::TradeUpdateReq* request, ::mt4api::TradeUpdateResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Open() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mt4api::TradeOpenResp, ::mt4api::TradeOpenReq>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::mt4api::TradeOpenResp, ::mt4api::TradeOpenReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::mt4api::TradeCloseReq* request, ::mt4api::TradeCloseResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::mt4api::TradeCloseReq* request, ::grpc::ServerAsyncResponseWriter< ::mt4api::TradeCloseResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mt4api::TradeUpdateReq* request, ::mt4api::TradeUpdateResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::mt4api::TradeUpdateReq* request, ::grpc::ServerAsyncResponseWriter< ::mt4api::TradeUpdateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Open<WithAsyncMethod_Close<WithAsyncMethod_Update<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Open() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mt4api::TradeOpenResp, ::mt4api::TradeOpenReq>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::mt4api::TradeCloseReq* request, ::mt4api::TradeCloseResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mt4api::TradeUpdateReq* request, ::mt4api::TradeUpdateResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mt4api::TradeCloseReq, ::mt4api::TradeCloseResp>(std::bind(&WithStreamedUnaryMethod_Close<BaseClass>::StreamedClose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* context, const ::mt4api::TradeCloseReq* request, ::mt4api::TradeCloseResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mt4api::TradeCloseReq,::mt4api::TradeCloseResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mt4api::TradeUpdateReq, ::mt4api::TradeUpdateResp>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mt4api::TradeUpdateReq* request, ::mt4api::TradeUpdateResp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mt4api::TradeUpdateReq,::mt4api::TradeUpdateResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Update<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Update<Service > > StreamedService;
};

}  // namespace mt4api


#endif  // GRPC_trade_2eproto__INCLUDED
