// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: activation.proto
#include "stdafx.h"
#include "activation.pb.h"
#include "activation.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service {

static const char* MT4Callback_method_names[] = {
  "/service.MT4Callback/Activation",
};

std::unique_ptr< MT4Callback::Stub> MT4Callback::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MT4Callback::Stub> stub(new MT4Callback::Stub(channel));
  return stub;
}

MT4Callback::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Activation_(MT4Callback_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MT4Callback::Stub::Activation(::grpc::ClientContext* context, const ::service::ActivationReq& request, ::service::NullResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Activation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service::NullResp>* MT4Callback::Stub::AsyncActivationRaw(::grpc::ClientContext* context, const ::service::ActivationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::service::NullResp>::Create(channel_.get(), cq, rpcmethod_Activation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service::NullResp>* MT4Callback::Stub::PrepareAsyncActivationRaw(::grpc::ClientContext* context, const ::service::ActivationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::service::NullResp>::Create(channel_.get(), cq, rpcmethod_Activation_, context, request, false);
}

MT4Callback::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MT4Callback_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MT4Callback::Service, ::service::ActivationReq, ::service::NullResp>(
          std::mem_fn(&MT4Callback::Service::Activation), this)));
}

MT4Callback::Service::~Service() {
}

::grpc::Status MT4Callback::Service::Activation(::grpc::ServerContext* context, const ::service::ActivationReq* request, ::service::NullResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service

