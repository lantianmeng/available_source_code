// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto
#include "stdafx.h"
#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace mt4api {
class TradeOpenReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeOpenReq>
      _instance;
} _TradeOpenReq_default_instance_;
class TradeOpenRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeOpenResp>
      _instance;
} _TradeOpenResp_default_instance_;
class TradeOpenDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeOpenData>
      _instance;
} _TradeOpenData_default_instance_;
class TradeCloseReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeCloseReq>
      _instance;
} _TradeCloseReq_default_instance_;
class TradeCloseRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeCloseResp>
      _instance;
} _TradeCloseResp_default_instance_;
class TradeCloseDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeCloseData>
      _instance;
} _TradeCloseData_default_instance_;
class TradeUpdateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeUpdateReq>
      _instance;
} _TradeUpdateReq_default_instance_;
class TradeUpdateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeUpdateResp>
      _instance;
} _TradeUpdateResp_default_instance_;
class TradeUpdateDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeUpdateData>
      _instance;
} _TradeUpdateData_default_instance_;
}  // namespace mt4api
namespace protobuf_trade_2eproto {
void InitDefaultsTradeOpenReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeOpenReq_default_instance_;
    new (ptr) ::mt4api::TradeOpenReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeOpenReq::InitAsDefaultInstance();
}

void InitDefaultsTradeOpenReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeOpenReqImpl);
}

void InitDefaultsTradeOpenRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_trade_2eproto::InitDefaultsTradeOpenData();
  {
    void* ptr = &::mt4api::_TradeOpenResp_default_instance_;
    new (ptr) ::mt4api::TradeOpenResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeOpenResp::InitAsDefaultInstance();
}

void InitDefaultsTradeOpenResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeOpenRespImpl);
}

void InitDefaultsTradeOpenDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeOpenData_default_instance_;
    new (ptr) ::mt4api::TradeOpenData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeOpenData::InitAsDefaultInstance();
}

void InitDefaultsTradeOpenData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeOpenDataImpl);
}

void InitDefaultsTradeCloseReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeCloseReq_default_instance_;
    new (ptr) ::mt4api::TradeCloseReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeCloseReq::InitAsDefaultInstance();
}

void InitDefaultsTradeCloseReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeCloseReqImpl);
}

void InitDefaultsTradeCloseRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_trade_2eproto::InitDefaultsTradeCloseData();
  {
    void* ptr = &::mt4api::_TradeCloseResp_default_instance_;
    new (ptr) ::mt4api::TradeCloseResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeCloseResp::InitAsDefaultInstance();
}

void InitDefaultsTradeCloseResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeCloseRespImpl);
}

void InitDefaultsTradeCloseDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeCloseData_default_instance_;
    new (ptr) ::mt4api::TradeCloseData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeCloseData::InitAsDefaultInstance();
}

void InitDefaultsTradeCloseData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeCloseDataImpl);
}

void InitDefaultsTradeUpdateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeUpdateReq_default_instance_;
    new (ptr) ::mt4api::TradeUpdateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeUpdateReq::InitAsDefaultInstance();
}

void InitDefaultsTradeUpdateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeUpdateReqImpl);
}

void InitDefaultsTradeUpdateRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_trade_2eproto::InitDefaultsTradeUpdateData();
  {
    void* ptr = &::mt4api::_TradeUpdateResp_default_instance_;
    new (ptr) ::mt4api::TradeUpdateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeUpdateResp::InitAsDefaultInstance();
}

void InitDefaultsTradeUpdateResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeUpdateRespImpl);
}

void InitDefaultsTradeUpdateDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mt4api::_TradeUpdateData_default_instance_;
    new (ptr) ::mt4api::TradeUpdateData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mt4api::TradeUpdateData::InitAsDefaultInstance();
}

void InitDefaultsTradeUpdateData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTradeUpdateDataImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, mt4id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenReq, tp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenResp, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, mt4id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, opentime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeOpenData, tp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, mt4id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseReq, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseResp, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, mt4id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, closetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, opentime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, closeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeCloseData, profit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, mt4id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateReq, tp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateResp, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateData, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mt4api::TradeUpdateData, tp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mt4api::TradeOpenReq)},
  { 12, -1, sizeof(::mt4api::TradeOpenResp)},
  { 19, -1, sizeof(::mt4api::TradeOpenData)},
  { 33, -1, sizeof(::mt4api::TradeCloseReq)},
  { 43, -1, sizeof(::mt4api::TradeCloseResp)},
  { 50, -1, sizeof(::mt4api::TradeCloseData)},
  { 67, -1, sizeof(::mt4api::TradeUpdateReq)},
  { 80, -1, sizeof(::mt4api::TradeUpdateResp)},
  { 87, -1, sizeof(::mt4api::TradeUpdateData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeOpenReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeOpenResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeOpenData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeCloseReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeCloseResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeCloseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeUpdateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeUpdateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mt4api::_TradeUpdateData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trade.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013trade.proto\022\006mt4api\"u\n\014TradeOpenReq\022\016\n"
      "\006Symbol\030\001 \001(\t\022\r\n\005MT4ID\030\002 \001(\005\022\013\n\003CMD\030\003 \001("
      "\005\022\016\n\006Volume\030\004 \001(\005\022\021\n\tOpenPrice\030\005 \001(\001\022\n\n\002"
      "SL\030\006 \001(\001\022\n\n\002TP\030\007 \001(\001\"B\n\rTradeOpenResp\022\014\n"
      "\004Code\030\001 \001(\005\022#\n\004Data\030\002 \001(\0132\025.mt4api.Trade"
      "OpenData\"\230\001\n\rTradeOpenData\022\016\n\006Symbol\030\001 \001"
      "(\t\022\r\n\005MT4ID\030\002 \001(\005\022\013\n\003CMD\030\003 \001(\005\022\016\n\006Volume"
      "\030\004 \001(\005\022\016\n\006Ticket\030\005 \001(\005\022\020\n\010OpenTime\030\006 \001(\003"
      "\022\021\n\tOpenPrice\030\007 \001(\001\022\n\n\002SL\030\010 \001(\001\022\n\n\002TP\030\t "
      "\001(\001\"[\n\rTradeCloseReq\022\016\n\006Symbol\030\001 \001(\t\022\r\n\005"
      "MT4ID\030\002 \001(\005\022\013\n\003CMD\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005"
      "\022\016\n\006Ticket\030\005 \001(\005\"D\n\016TradeCloseResp\022\014\n\004Co"
      "de\030\001 \001(\005\022$\n\004Data\030\002 \001(\0132\026.mt4api.TradeClo"
      "seData\"\320\001\n\016TradeCloseData\022\016\n\006Symbol\030\001 \001("
      "\t\022\r\n\005MT4ID\030\002 \001(\005\022\013\n\003CMD\030\003 \001(\005\022\016\n\006Volume\030"
      "\004 \001(\005\022\016\n\006Ticket\030\005 \001(\005\022\021\n\tCloseTime\030\006 \001(\003"
      "\022\020\n\010OpenTime\030\007 \001(\003\022\022\n\nClosePrice\030\010 \001(\001\022\021"
      "\n\tOpenPrice\030\t \001(\001\022\n\n\002SL\030\n \001(\001\022\n\n\002TP\030\013 \001("
      "\001\022\016\n\006Profit\030\014 \001(\001\"\207\001\n\016TradeUpdateReq\022\016\n\006"
      "Symbol\030\001 \001(\t\022\r\n\005MT4ID\030\002 \001(\005\022\013\n\003CMD\030\003 \001(\005"
      "\022\016\n\006Volume\030\004 \001(\005\022\016\n\006Ticket\030\005 \001(\005\022\021\n\tOpen"
      "Price\030\006 \001(\001\022\n\n\002SL\030\007 \001(\001\022\n\n\002TP\030\010 \001(\001\"F\n\017T"
      "radeUpdateResp\022\014\n\004Code\030\001 \001(\005\022%\n\004Data\030\002 \001"
      "(\0132\027.mt4api.TradeUpdateData\")\n\017TradeUpda"
      "teData\022\n\n\002SL\030\001 \001(\001\022\n\n\002TP\030\002 \001(\0012\265\001\n\005Trade"
      "\0225\n\004Open\022\024.mt4api.TradeOpenReq\032\025.mt4api."
      "TradeOpenResp\"\000\0228\n\005Close\022\025.mt4api.TradeC"
      "loseReq\032\026.mt4api.TradeCloseResp\"\000\022;\n\006Upd"
      "ate\022\026.mt4api.TradeUpdateReq\032\027.mt4api.Tra"
      "deUpdateResp\"\000B\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_trade_2eproto
namespace mt4api {

// ===================================================================

void TradeOpenReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeOpenReq::kSymbolFieldNumber;
const int TradeOpenReq::kMT4IDFieldNumber;
const int TradeOpenReq::kCMDFieldNumber;
const int TradeOpenReq::kVolumeFieldNumber;
const int TradeOpenReq::kOpenPriceFieldNumber;
const int TradeOpenReq::kSLFieldNumber;
const int TradeOpenReq::kTPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeOpenReq::TradeOpenReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeOpenReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeOpenReq)
}
TradeOpenReq::TradeOpenReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenReq();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeOpenReq)
}
TradeOpenReq::TradeOpenReq(const TradeOpenReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&mt4id_, &from.mt4id_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&mt4id_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeOpenReq)
}

void TradeOpenReq::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(volume_));
  _cached_size_ = 0;
}

TradeOpenReq::~TradeOpenReq() {
  // @@protoc_insertion_point(destructor:mt4api.TradeOpenReq)
  SharedDtor();
}

void TradeOpenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeOpenReq::ArenaDtor(void* object) {
  TradeOpenReq* _this = reinterpret_cast< TradeOpenReq* >(object);
  (void)_this;
}
void TradeOpenReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeOpenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeOpenReq::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeOpenReq& TradeOpenReq::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenReq();
  return *internal_default_instance();
}

TradeOpenReq* TradeOpenReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeOpenReq>(arena);
}

void TradeOpenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeOpenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

bool TradeOpenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeOpenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mt4api.TradeOpenReq.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MT4ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mt4id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CMD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SL = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TP = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeOpenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeOpenReq)
  return false;
#undef DO_
}

void TradeOpenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeOpenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeOpenReq.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mt4id(), output);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // double OpenPrice = 5;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->openprice(), output);
  }

  // double SL = 6;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sl(), output);
  }

  // double TP = 7;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->tp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeOpenReq)
}

::google::protobuf::uint8* TradeOpenReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeOpenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeOpenReq.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mt4id(), target);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // double OpenPrice = 5;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->openprice(), target);
  }

  // double SL = 6;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sl(), target);
  }

  // double TP = 7;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->tp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeOpenReq)
  return target;
}

size_t TradeOpenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeOpenReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mt4id());
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // double OpenPrice = 5;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double SL = 6;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double TP = 7;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeOpenReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeOpenReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOpenReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeOpenReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeOpenReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeOpenReq)
    MergeFrom(*source);
  }
}

void TradeOpenReq::MergeFrom(const TradeOpenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeOpenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.mt4id() != 0) {
    set_mt4id(from.mt4id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void TradeOpenReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeOpenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOpenReq::CopyFrom(const TradeOpenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeOpenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOpenReq::IsInitialized() const {
  return true;
}

void TradeOpenReq::Swap(TradeOpenReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeOpenReq* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeOpenReq::UnsafeArenaSwap(TradeOpenReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeOpenReq::InternalSwap(TradeOpenReq* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(mt4id_, other->mt4id_);
  swap(cmd_, other->cmd_);
  swap(openprice_, other->openprice_);
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  swap(volume_, other->volume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeOpenReq::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeOpenResp::InitAsDefaultInstance() {
  ::mt4api::_TradeOpenResp_default_instance_._instance.get_mutable()->data_ = const_cast< ::mt4api::TradeOpenData*>(
      ::mt4api::TradeOpenData::internal_default_instance());
}
void TradeOpenResp::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::mt4api::TradeOpenData >(
      GetArenaNoVirtual());
}
void TradeOpenResp::unsafe_arena_set_allocated_data(
    ::mt4api::TradeOpenData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mt4api.TradeOpenResp.Data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeOpenResp::kCodeFieldNumber;
const int TradeOpenResp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeOpenResp::TradeOpenResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeOpenResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeOpenResp)
}
TradeOpenResp::TradeOpenResp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenResp();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeOpenResp)
}
TradeOpenResp::TradeOpenResp(const TradeOpenResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::mt4api::TradeOpenData(*from.data_);
  } else {
    data_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeOpenResp)
}

void TradeOpenResp::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&data_)) + sizeof(code_));
  _cached_size_ = 0;
}

TradeOpenResp::~TradeOpenResp() {
  // @@protoc_insertion_point(destructor:mt4api.TradeOpenResp)
  SharedDtor();
}

void TradeOpenResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete data_;
}

void TradeOpenResp::ArenaDtor(void* object) {
  TradeOpenResp* _this = reinterpret_cast< TradeOpenResp* >(object);
  (void)_this;
}
void TradeOpenResp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeOpenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeOpenResp::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeOpenResp& TradeOpenResp::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenResp();
  return *internal_default_instance();
}

TradeOpenResp* TradeOpenResp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeOpenResp>(arena);
}

void TradeOpenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeOpenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  code_ = 0;
  _internal_metadata_.Clear();
}

bool TradeOpenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeOpenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mt4api.TradeOpenData Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeOpenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeOpenResp)
  return false;
#undef DO_
}

void TradeOpenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeOpenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // .mt4api.TradeOpenData Data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeOpenResp)
}

::google::protobuf::uint8* TradeOpenResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeOpenResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // .mt4api.TradeOpenData Data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeOpenResp)
  return target;
}

size_t TradeOpenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeOpenResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mt4api.TradeOpenData Data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeOpenResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeOpenResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOpenResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeOpenResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeOpenResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeOpenResp)
    MergeFrom(*source);
  }
}

void TradeOpenResp::MergeFrom(const TradeOpenResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeOpenResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::mt4api::TradeOpenData::MergeFrom(from.data());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TradeOpenResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeOpenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOpenResp::CopyFrom(const TradeOpenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeOpenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOpenResp::IsInitialized() const {
  return true;
}

void TradeOpenResp::Swap(TradeOpenResp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeOpenResp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeOpenResp::UnsafeArenaSwap(TradeOpenResp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeOpenResp::InternalSwap(TradeOpenResp* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeOpenResp::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeOpenData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeOpenData::kSymbolFieldNumber;
const int TradeOpenData::kMT4IDFieldNumber;
const int TradeOpenData::kCMDFieldNumber;
const int TradeOpenData::kVolumeFieldNumber;
const int TradeOpenData::kTicketFieldNumber;
const int TradeOpenData::kOpenTimeFieldNumber;
const int TradeOpenData::kOpenPriceFieldNumber;
const int TradeOpenData::kSLFieldNumber;
const int TradeOpenData::kTPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeOpenData::TradeOpenData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeOpenData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeOpenData)
}
TradeOpenData::TradeOpenData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenData();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeOpenData)
}
TradeOpenData::TradeOpenData(const TradeOpenData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&mt4id_, &from.mt4id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
    reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeOpenData)
}

void TradeOpenData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  _cached_size_ = 0;
}

TradeOpenData::~TradeOpenData() {
  // @@protoc_insertion_point(destructor:mt4api.TradeOpenData)
  SharedDtor();
}

void TradeOpenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeOpenData::ArenaDtor(void* object) {
  TradeOpenData* _this = reinterpret_cast< TradeOpenData* >(object);
  (void)_this;
}
void TradeOpenData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeOpenData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeOpenData::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeOpenData& TradeOpenData::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeOpenData();
  return *internal_default_instance();
}

TradeOpenData* TradeOpenData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeOpenData>(arena);
}

void TradeOpenData::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeOpenData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  _internal_metadata_.Clear();
}

bool TradeOpenData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeOpenData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mt4api.TradeOpenData.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MT4ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mt4id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CMD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OpenTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SL = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TP = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeOpenData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeOpenData)
  return false;
#undef DO_
}

void TradeOpenData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeOpenData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeOpenData.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mt4id(), output);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ticket(), output);
  }

  // int64 OpenTime = 6;
  if (this->opentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->opentime(), output);
  }

  // double OpenPrice = 7;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openprice(), output);
  }

  // double SL = 8;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sl(), output);
  }

  // double TP = 9;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeOpenData)
}

::google::protobuf::uint8* TradeOpenData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeOpenData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeOpenData.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mt4id(), target);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ticket(), target);
  }

  // int64 OpenTime = 6;
  if (this->opentime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->opentime(), target);
  }

  // double OpenPrice = 7;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openprice(), target);
  }

  // double SL = 8;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sl(), target);
  }

  // double TP = 9;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeOpenData)
  return target;
}

size_t TradeOpenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeOpenData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mt4id());
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  // int64 OpenTime = 6;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->opentime());
  }

  // double OpenPrice = 7;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double SL = 8;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double TP = 9;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeOpenData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeOpenData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOpenData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeOpenData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeOpenData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeOpenData)
    MergeFrom(*source);
  }
}

void TradeOpenData::MergeFrom(const TradeOpenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeOpenData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.mt4id() != 0) {
    set_mt4id(from.mt4id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
  if (from.opentime() != 0) {
    set_opentime(from.opentime());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
}

void TradeOpenData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeOpenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOpenData::CopyFrom(const TradeOpenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeOpenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOpenData::IsInitialized() const {
  return true;
}

void TradeOpenData::Swap(TradeOpenData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeOpenData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeOpenData::UnsafeArenaSwap(TradeOpenData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeOpenData::InternalSwap(TradeOpenData* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(mt4id_, other->mt4id_);
  swap(cmd_, other->cmd_);
  swap(volume_, other->volume_);
  swap(ticket_, other->ticket_);
  swap(opentime_, other->opentime_);
  swap(openprice_, other->openprice_);
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeOpenData::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeCloseReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeCloseReq::kSymbolFieldNumber;
const int TradeCloseReq::kMT4IDFieldNumber;
const int TradeCloseReq::kCMDFieldNumber;
const int TradeCloseReq::kVolumeFieldNumber;
const int TradeCloseReq::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeCloseReq::TradeCloseReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeCloseReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeCloseReq)
}
TradeCloseReq::TradeCloseReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseReq();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeCloseReq)
}
TradeCloseReq::TradeCloseReq(const TradeCloseReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&mt4id_, &from.mt4id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&mt4id_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeCloseReq)
}

void TradeCloseReq::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(ticket_));
  _cached_size_ = 0;
}

TradeCloseReq::~TradeCloseReq() {
  // @@protoc_insertion_point(destructor:mt4api.TradeCloseReq)
  SharedDtor();
}

void TradeCloseReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeCloseReq::ArenaDtor(void* object) {
  TradeCloseReq* _this = reinterpret_cast< TradeCloseReq* >(object);
  (void)_this;
}
void TradeCloseReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeCloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeCloseReq::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeCloseReq& TradeCloseReq::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseReq();
  return *internal_default_instance();
}

TradeCloseReq* TradeCloseReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeCloseReq>(arena);
}

void TradeCloseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeCloseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(ticket_));
  _internal_metadata_.Clear();
}

bool TradeCloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeCloseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mt4api.TradeCloseReq.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MT4ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mt4id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CMD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeCloseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeCloseReq)
  return false;
#undef DO_
}

void TradeCloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeCloseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeCloseReq.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mt4id(), output);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeCloseReq)
}

::google::protobuf::uint8* TradeCloseReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeCloseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeCloseReq.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mt4id(), target);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeCloseReq)
  return target;
}

size_t TradeCloseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeCloseReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mt4id());
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeCloseReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeCloseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeCloseReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeCloseReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeCloseReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeCloseReq)
    MergeFrom(*source);
  }
}

void TradeCloseReq::MergeFrom(const TradeCloseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeCloseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.mt4id() != 0) {
    set_mt4id(from.mt4id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void TradeCloseReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeCloseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeCloseReq::CopyFrom(const TradeCloseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeCloseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeCloseReq::IsInitialized() const {
  return true;
}

void TradeCloseReq::Swap(TradeCloseReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeCloseReq* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeCloseReq::UnsafeArenaSwap(TradeCloseReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeCloseReq::InternalSwap(TradeCloseReq* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(mt4id_, other->mt4id_);
  swap(cmd_, other->cmd_);
  swap(volume_, other->volume_);
  swap(ticket_, other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeCloseReq::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeCloseResp::InitAsDefaultInstance() {
  ::mt4api::_TradeCloseResp_default_instance_._instance.get_mutable()->data_ = const_cast< ::mt4api::TradeCloseData*>(
      ::mt4api::TradeCloseData::internal_default_instance());
}
void TradeCloseResp::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::mt4api::TradeCloseData >(
      GetArenaNoVirtual());
}
void TradeCloseResp::unsafe_arena_set_allocated_data(
    ::mt4api::TradeCloseData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mt4api.TradeCloseResp.Data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeCloseResp::kCodeFieldNumber;
const int TradeCloseResp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeCloseResp::TradeCloseResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeCloseResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeCloseResp)
}
TradeCloseResp::TradeCloseResp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseResp();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeCloseResp)
}
TradeCloseResp::TradeCloseResp(const TradeCloseResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::mt4api::TradeCloseData(*from.data_);
  } else {
    data_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeCloseResp)
}

void TradeCloseResp::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&data_)) + sizeof(code_));
  _cached_size_ = 0;
}

TradeCloseResp::~TradeCloseResp() {
  // @@protoc_insertion_point(destructor:mt4api.TradeCloseResp)
  SharedDtor();
}

void TradeCloseResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete data_;
}

void TradeCloseResp::ArenaDtor(void* object) {
  TradeCloseResp* _this = reinterpret_cast< TradeCloseResp* >(object);
  (void)_this;
}
void TradeCloseResp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeCloseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeCloseResp::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeCloseResp& TradeCloseResp::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseResp();
  return *internal_default_instance();
}

TradeCloseResp* TradeCloseResp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeCloseResp>(arena);
}

void TradeCloseResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeCloseResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  code_ = 0;
  _internal_metadata_.Clear();
}

bool TradeCloseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeCloseResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mt4api.TradeCloseData Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeCloseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeCloseResp)
  return false;
#undef DO_
}

void TradeCloseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeCloseResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // .mt4api.TradeCloseData Data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeCloseResp)
}

::google::protobuf::uint8* TradeCloseResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeCloseResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // .mt4api.TradeCloseData Data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeCloseResp)
  return target;
}

size_t TradeCloseResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeCloseResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mt4api.TradeCloseData Data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeCloseResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeCloseResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeCloseResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeCloseResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeCloseResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeCloseResp)
    MergeFrom(*source);
  }
}

void TradeCloseResp::MergeFrom(const TradeCloseResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeCloseResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::mt4api::TradeCloseData::MergeFrom(from.data());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TradeCloseResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeCloseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeCloseResp::CopyFrom(const TradeCloseResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeCloseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeCloseResp::IsInitialized() const {
  return true;
}

void TradeCloseResp::Swap(TradeCloseResp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeCloseResp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeCloseResp::UnsafeArenaSwap(TradeCloseResp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeCloseResp::InternalSwap(TradeCloseResp* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeCloseResp::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeCloseData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeCloseData::kSymbolFieldNumber;
const int TradeCloseData::kMT4IDFieldNumber;
const int TradeCloseData::kCMDFieldNumber;
const int TradeCloseData::kVolumeFieldNumber;
const int TradeCloseData::kTicketFieldNumber;
const int TradeCloseData::kCloseTimeFieldNumber;
const int TradeCloseData::kOpenTimeFieldNumber;
const int TradeCloseData::kClosePriceFieldNumber;
const int TradeCloseData::kOpenPriceFieldNumber;
const int TradeCloseData::kSLFieldNumber;
const int TradeCloseData::kTPFieldNumber;
const int TradeCloseData::kProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeCloseData::TradeCloseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeCloseData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeCloseData)
}
TradeCloseData::TradeCloseData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseData();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeCloseData)
}
TradeCloseData::TradeCloseData(const TradeCloseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&mt4id_, &from.mt4id_,
    static_cast<size_t>(reinterpret_cast<char*>(&profit_) -
    reinterpret_cast<char*>(&mt4id_)) + sizeof(profit_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeCloseData)
}

void TradeCloseData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profit_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(profit_));
  _cached_size_ = 0;
}

TradeCloseData::~TradeCloseData() {
  // @@protoc_insertion_point(destructor:mt4api.TradeCloseData)
  SharedDtor();
}

void TradeCloseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeCloseData::ArenaDtor(void* object) {
  TradeCloseData* _this = reinterpret_cast< TradeCloseData* >(object);
  (void)_this;
}
void TradeCloseData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeCloseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeCloseData::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeCloseData& TradeCloseData::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeCloseData();
  return *internal_default_instance();
}

TradeCloseData* TradeCloseData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeCloseData>(arena);
}

void TradeCloseData::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeCloseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profit_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(profit_));
  _internal_metadata_.Clear();
}

bool TradeCloseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeCloseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mt4api.TradeCloseData.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MT4ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mt4id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CMD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 CloseTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OpenTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ClosePrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SL = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TP = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Profit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeCloseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeCloseData)
  return false;
#undef DO_
}

void TradeCloseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeCloseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeCloseData.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mt4id(), output);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ticket(), output);
  }

  // int64 CloseTime = 6;
  if (this->closetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->closetime(), output);
  }

  // int64 OpenTime = 7;
  if (this->opentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->opentime(), output);
  }

  // double ClosePrice = 8;
  if (this->closeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->closeprice(), output);
  }

  // double OpenPrice = 9;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }

  // double SL = 10;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sl(), output);
  }

  // double TP = 11;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->tp(), output);
  }

  // double Profit = 12;
  if (this->profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->profit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeCloseData)
}

::google::protobuf::uint8* TradeCloseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeCloseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeCloseData.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mt4id(), target);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ticket(), target);
  }

  // int64 CloseTime = 6;
  if (this->closetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->closetime(), target);
  }

  // int64 OpenTime = 7;
  if (this->opentime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->opentime(), target);
  }

  // double ClosePrice = 8;
  if (this->closeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->closeprice(), target);
  }

  // double OpenPrice = 9;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }

  // double SL = 10;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sl(), target);
  }

  // double TP = 11;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->tp(), target);
  }

  // double Profit = 12;
  if (this->profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->profit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeCloseData)
  return target;
}

size_t TradeCloseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeCloseData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mt4id());
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  // int64 CloseTime = 6;
  if (this->closetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closetime());
  }

  // int64 OpenTime = 7;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->opentime());
  }

  // double ClosePrice = 8;
  if (this->closeprice() != 0) {
    total_size += 1 + 8;
  }

  // double OpenPrice = 9;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double SL = 10;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double TP = 11;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  // double Profit = 12;
  if (this->profit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeCloseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeCloseData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeCloseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeCloseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeCloseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeCloseData)
    MergeFrom(*source);
  }
}

void TradeCloseData::MergeFrom(const TradeCloseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeCloseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.mt4id() != 0) {
    set_mt4id(from.mt4id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
  if (from.closetime() != 0) {
    set_closetime(from.closetime());
  }
  if (from.opentime() != 0) {
    set_opentime(from.opentime());
  }
  if (from.closeprice() != 0) {
    set_closeprice(from.closeprice());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
  if (from.profit() != 0) {
    set_profit(from.profit());
  }
}

void TradeCloseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeCloseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeCloseData::CopyFrom(const TradeCloseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeCloseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeCloseData::IsInitialized() const {
  return true;
}

void TradeCloseData::Swap(TradeCloseData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeCloseData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeCloseData::UnsafeArenaSwap(TradeCloseData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeCloseData::InternalSwap(TradeCloseData* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(mt4id_, other->mt4id_);
  swap(cmd_, other->cmd_);
  swap(volume_, other->volume_);
  swap(ticket_, other->ticket_);
  swap(closetime_, other->closetime_);
  swap(opentime_, other->opentime_);
  swap(closeprice_, other->closeprice_);
  swap(openprice_, other->openprice_);
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  swap(profit_, other->profit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeCloseData::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeUpdateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeUpdateReq::kSymbolFieldNumber;
const int TradeUpdateReq::kMT4IDFieldNumber;
const int TradeUpdateReq::kCMDFieldNumber;
const int TradeUpdateReq::kVolumeFieldNumber;
const int TradeUpdateReq::kTicketFieldNumber;
const int TradeUpdateReq::kOpenPriceFieldNumber;
const int TradeUpdateReq::kSLFieldNumber;
const int TradeUpdateReq::kTPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeUpdateReq::TradeUpdateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeUpdateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeUpdateReq)
}
TradeUpdateReq::TradeUpdateReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateReq();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeUpdateReq)
}
TradeUpdateReq::TradeUpdateReq(const TradeUpdateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&mt4id_, &from.mt4id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
    reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeUpdateReq)
}

void TradeUpdateReq::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  _cached_size_ = 0;
}

TradeUpdateReq::~TradeUpdateReq() {
  // @@protoc_insertion_point(destructor:mt4api.TradeUpdateReq)
  SharedDtor();
}

void TradeUpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeUpdateReq::ArenaDtor(void* object) {
  TradeUpdateReq* _this = reinterpret_cast< TradeUpdateReq* >(object);
  (void)_this;
}
void TradeUpdateReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeUpdateReq::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeUpdateReq& TradeUpdateReq::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateReq();
  return *internal_default_instance();
}

TradeUpdateReq* TradeUpdateReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeUpdateReq>(arena);
}

void TradeUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&mt4id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&mt4id_)) + sizeof(tp_));
  _internal_metadata_.Clear();
}

bool TradeUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mt4api.TradeUpdateReq.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MT4ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mt4id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CMD = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SL = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TP = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeUpdateReq)
  return false;
#undef DO_
}

void TradeUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeUpdateReq.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mt4id(), output);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ticket(), output);
  }

  // double OpenPrice = 6;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->openprice(), output);
  }

  // double SL = 7;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sl(), output);
  }

  // double TP = 8;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeUpdateReq)
}

::google::protobuf::uint8* TradeUpdateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mt4api.TradeUpdateReq.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mt4id(), target);
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ticket(), target);
  }

  // double OpenPrice = 6;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->openprice(), target);
  }

  // double SL = 7;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sl(), target);
  }

  // double TP = 8;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeUpdateReq)
  return target;
}

size_t TradeUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeUpdateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 MT4ID = 2;
  if (this->mt4id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mt4id());
  }

  // int32 CMD = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 Ticket = 5;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  // double OpenPrice = 6;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double SL = 7;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double TP = 8;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeUpdateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeUpdateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeUpdateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeUpdateReq)
    MergeFrom(*source);
  }
}

void TradeUpdateReq::MergeFrom(const TradeUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.mt4id() != 0) {
    set_mt4id(from.mt4id());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
}

void TradeUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeUpdateReq::CopyFrom(const TradeUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeUpdateReq::IsInitialized() const {
  return true;
}

void TradeUpdateReq::Swap(TradeUpdateReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeUpdateReq* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeUpdateReq::UnsafeArenaSwap(TradeUpdateReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeUpdateReq::InternalSwap(TradeUpdateReq* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(mt4id_, other->mt4id_);
  swap(cmd_, other->cmd_);
  swap(volume_, other->volume_);
  swap(ticket_, other->ticket_);
  swap(openprice_, other->openprice_);
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeUpdateReq::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeUpdateResp::InitAsDefaultInstance() {
  ::mt4api::_TradeUpdateResp_default_instance_._instance.get_mutable()->data_ = const_cast< ::mt4api::TradeUpdateData*>(
      ::mt4api::TradeUpdateData::internal_default_instance());
}
void TradeUpdateResp::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::mt4api::TradeUpdateData >(
      GetArenaNoVirtual());
}
void TradeUpdateResp::unsafe_arena_set_allocated_data(
    ::mt4api::TradeUpdateData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mt4api.TradeUpdateResp.Data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeUpdateResp::kCodeFieldNumber;
const int TradeUpdateResp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeUpdateResp::TradeUpdateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeUpdateResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeUpdateResp)
}
TradeUpdateResp::TradeUpdateResp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateResp();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeUpdateResp)
}
TradeUpdateResp::TradeUpdateResp(const TradeUpdateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::mt4api::TradeUpdateData(*from.data_);
  } else {
    data_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeUpdateResp)
}

void TradeUpdateResp::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&data_)) + sizeof(code_));
  _cached_size_ = 0;
}

TradeUpdateResp::~TradeUpdateResp() {
  // @@protoc_insertion_point(destructor:mt4api.TradeUpdateResp)
  SharedDtor();
}

void TradeUpdateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete data_;
}

void TradeUpdateResp::ArenaDtor(void* object) {
  TradeUpdateResp* _this = reinterpret_cast< TradeUpdateResp* >(object);
  (void)_this;
}
void TradeUpdateResp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeUpdateResp::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeUpdateResp& TradeUpdateResp::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateResp();
  return *internal_default_instance();
}

TradeUpdateResp* TradeUpdateResp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeUpdateResp>(arena);
}

void TradeUpdateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  code_ = 0;
  _internal_metadata_.Clear();
}

bool TradeUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeUpdateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mt4api.TradeUpdateData Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeUpdateResp)
  return false;
#undef DO_
}

void TradeUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // .mt4api.TradeUpdateData Data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeUpdateResp)
}

::google::protobuf::uint8* TradeUpdateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // .mt4api.TradeUpdateData Data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeUpdateResp)
  return target;
}

size_t TradeUpdateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeUpdateResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mt4api.TradeUpdateData Data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeUpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeUpdateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeUpdateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeUpdateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeUpdateResp)
    MergeFrom(*source);
  }
}

void TradeUpdateResp::MergeFrom(const TradeUpdateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeUpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::mt4api::TradeUpdateData::MergeFrom(from.data());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TradeUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeUpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeUpdateResp::CopyFrom(const TradeUpdateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeUpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeUpdateResp::IsInitialized() const {
  return true;
}

void TradeUpdateResp::Swap(TradeUpdateResp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeUpdateResp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeUpdateResp::UnsafeArenaSwap(TradeUpdateResp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeUpdateResp::InternalSwap(TradeUpdateResp* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeUpdateResp::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeUpdateData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeUpdateData::kSLFieldNumber;
const int TradeUpdateData::kTPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeUpdateData::TradeUpdateData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_trade_2eproto::InitDefaultsTradeUpdateData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mt4api.TradeUpdateData)
}
TradeUpdateData::TradeUpdateData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateData();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mt4api.TradeUpdateData)
}
TradeUpdateData::TradeUpdateData(const TradeUpdateData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sl_, &from.sl_,
    static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
    reinterpret_cast<char*>(&sl_)) + sizeof(tp_));
  // @@protoc_insertion_point(copy_constructor:mt4api.TradeUpdateData)
}

void TradeUpdateData::SharedCtor() {
  ::memset(&sl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&sl_)) + sizeof(tp_));
  _cached_size_ = 0;
}

TradeUpdateData::~TradeUpdateData() {
  // @@protoc_insertion_point(destructor:mt4api.TradeUpdateData)
  SharedDtor();
}

void TradeUpdateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TradeUpdateData::ArenaDtor(void* object) {
  TradeUpdateData* _this = reinterpret_cast< TradeUpdateData* >(object);
  (void)_this;
}
void TradeUpdateData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TradeUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeUpdateData::descriptor() {
  ::protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeUpdateData& TradeUpdateData::default_instance() {
  ::protobuf_trade_2eproto::InitDefaultsTradeUpdateData();
  return *internal_default_instance();
}

TradeUpdateData* TradeUpdateData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TradeUpdateData>(arena);
}

void TradeUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:mt4api.TradeUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&sl_)) + sizeof(tp_));
  _internal_metadata_.Clear();
}

bool TradeUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mt4api.TradeUpdateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double SL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mt4api.TradeUpdateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mt4api.TradeUpdateData)
  return false;
#undef DO_
}

void TradeUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mt4api.TradeUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double SL = 1;
  if (this->sl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sl(), output);
  }

  // double TP = 2;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mt4api.TradeUpdateData)
}

::google::protobuf::uint8* TradeUpdateData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mt4api.TradeUpdateData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double SL = 1;
  if (this->sl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sl(), target);
  }

  // double TP = 2;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mt4api.TradeUpdateData)
  return target;
}

size_t TradeUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mt4api.TradeUpdateData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double SL = 1;
  if (this->sl() != 0) {
    total_size += 1 + 8;
  }

  // double TP = 2;
  if (this->tp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mt4api.TradeUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeUpdateData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeUpdateData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mt4api.TradeUpdateData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mt4api.TradeUpdateData)
    MergeFrom(*source);
  }
}

void TradeUpdateData::MergeFrom(const TradeUpdateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mt4api.TradeUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sl() != 0) {
    set_sl(from.sl());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
}

void TradeUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mt4api.TradeUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeUpdateData::CopyFrom(const TradeUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mt4api.TradeUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeUpdateData::IsInitialized() const {
  return true;
}

void TradeUpdateData::Swap(TradeUpdateData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TradeUpdateData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TradeUpdateData::UnsafeArenaSwap(TradeUpdateData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TradeUpdateData::InternalSwap(TradeUpdateData* other) {
  using std::swap;
  swap(sl_, other->sl_);
  swap(tp_, other->tp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeUpdateData::GetMetadata() const {
  protobuf_trade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_trade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mt4api

// @@protoc_insertion_point(global_scope)
