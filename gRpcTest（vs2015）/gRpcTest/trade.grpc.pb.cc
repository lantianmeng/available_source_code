// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trade.proto
#include "stdafx.h"
#include "trade.pb.h"
#include "trade.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mt4api {

static const char* Trade_method_names[] = {
  "/mt4api.Trade/Open",
  "/mt4api.Trade/Close",
  "/mt4api.Trade/Update",
};

std::unique_ptr< Trade::Stub> Trade::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Trade::Stub> stub(new Trade::Stub(channel));
  return stub;
}

Trade::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Open_(Trade_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Close_(Trade_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Trade_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* Trade::Stub::OpenRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>::Create(channel_.get(), rpcmethod_Open_, context);
}

::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* Trade::Stub::AsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>::Create(channel_.get(), cq, rpcmethod_Open_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>* Trade::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>::Create(channel_.get(), cq, rpcmethod_Open_, context, false, nullptr);
}

::grpc::Status Trade::Stub::Close(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::mt4api::TradeCloseResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>* Trade::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mt4api::TradeCloseResp>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mt4api::TradeCloseResp>* Trade::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::mt4api::TradeCloseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mt4api::TradeCloseResp>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

::grpc::Status Trade::Stub::Update(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::mt4api::TradeUpdateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>* Trade::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mt4api::TradeUpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mt4api::TradeUpdateResp>* Trade::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mt4api::TradeUpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mt4api::TradeUpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

Trade::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trade_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Trade::Service, ::mt4api::TradeOpenReq, ::mt4api::TradeOpenResp>(
          std::mem_fn(&Trade::Service::Open), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trade_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trade::Service, ::mt4api::TradeCloseReq, ::mt4api::TradeCloseResp>(
          std::mem_fn(&Trade::Service::Close), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trade_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trade::Service, ::mt4api::TradeUpdateReq, ::mt4api::TradeUpdateResp>(
          std::mem_fn(&Trade::Service::Update), this)));
}

Trade::Service::~Service() {
}

::grpc::Status Trade::Service::Open(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mt4api::TradeOpenResp, ::mt4api::TradeOpenReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trade::Service::Close(::grpc::ServerContext* context, const ::mt4api::TradeCloseReq* request, ::mt4api::TradeCloseResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trade::Service::Update(::grpc::ServerContext* context, const ::mt4api::TradeUpdateReq* request, ::mt4api::TradeUpdateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mt4api

